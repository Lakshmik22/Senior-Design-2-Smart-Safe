#include <Arduino.h>
#include <Keypad.h>

// Keypad Definitions
#define ROWS 4
#define COLS 4

#define PIN_RED 2
#define PIN_GREEN 4

#define RELAY_PIN 23

// Buzzer Pin
const int buzzerPin = 15;

bool inLockdownMode = false;

char keyMap[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};

uint8_t rowPins[ROWS] = {33, 32, 18, 19}; // GPIO pins for keypad rows
uint8_t colPins[COLS] = {14, 27, 26, 25}; // GPIO pins for keypad columns

Keypad keypad = Keypad(makeKeymap(keyMap), rowPins, colPins, ROWS, COLS);

// Code Variables
char enteredCode[4] = {' ', ' ', ' ', ' '};
char correctCode[4] = {'1', '2', '3', '4'};
int numberOfCodeDigitsEntered = 0;
int attempts = 0;

void resetCode() {
  for (int i = 0; i < 4; i++) {
    enteredCode[i] = ' ';
    enteredCode[i] = '\0';
  }
  numberOfCodeDigitsEntered = 0;

  // Reset LEDs and display
  analogWrite(PIN_RED, 0);
  analogWrite(PIN_GREEN, 0);
}

void checkEnteredCode() {
  bool codeMatched = true;

  // Loop over the correct code and check against the entered code
  for (int i = 0; i < 4; i++) {
    if (correctCode[i] != enteredCode[i]) {
      codeMatched = false;
      break;
    }
  }

  if (codeMatched == true) {
    // Code matched - Access Granted
    Serial.println("Access granted");

    analogWrite(PIN_GREEN, 255);
    analogWrite(buzzerPin, 250);
    delay(1000);
    analogWrite(buzzerPin, 0);
    analogWrite(PIN_GREEN, 0);

    energizeLock();
    delay(10000);
    deenergizeLock();

    attempts = 0;

    resetCode();

  } else {
    // Code did not match - Access Denied
    Serial.println("Access denied");
    attempts++;
    analogWrite(PIN_RED, 255);
    analogWrite(buzzerPin, 250);
    delay(1000);
    analogWrite(buzzerPin, 0);
    analogWrite(PIN_RED, 0);
    
    if(attempts != 3){
      resetCode();
    }
  }

  if(attempts==3){
        Serial.println("LOCKDOWN MODE ACTIVATED!");
         inLockdownMode = true;

        analogWrite(buzzerPin, 250); // Set to HIGH to make the buzzer sound
        analogWrite(PIN_RED,   250);
        delay(500); // keep the color 1 second
        analogWrite(PIN_RED,   0);
        delay(500); // keep the color 1 second
        analogWrite(PIN_RED,   250);
        delay(500); // keep the color 1 second
        analogWrite(PIN_RED,   0);
        delay(500); // keep the color 1 second
        analogWrite(PIN_RED,   250);
        delay(500); // keep the color 1 second
        analogWrite(PIN_RED,   0);

        analogWrite(buzzerPin, 0); // LOW to turn off the buzzer
        
        attempts=0;
      }
}

void energizeLock(){ //unlock door
  digitalWrite(RELAY_PIN, LOW);
}

void deenergizeLock(){ //lock door
  digitalWrite(RELAY_PIN, HIGH);
}

void setup() {
  // Initialize Serial Communication
  Serial.begin(9600);

  // Initialize Pins
  pinMode(PIN_RED, OUTPUT);
  pinMode(PIN_GREEN, OUTPUT);
  pinMode(buzzerPin, OUTPUT);
  pinMode(RELAY_PIN, OUTPUT); 

  // Reset Code
  resetCode();

  deenergizeLock();

}

void loop() {

  if (keypad.getKeys()) {
    for (int i = 0; i < LIST_MAX; i++) {
      if (keypad.key[i].stateChanged) { // Only find keys that have changed state
        switch (keypad.key[i].kstate) { // Check active key state
          case PRESSED:
          Serial.println(keypad.key[i].kchar);
          analogWrite(buzzerPin, 250);
          delay(200);
          analogWrite(buzzerPin, 0);
            switch (keypad.key[i].kchar) {
              case '*': // Reset
                resetCode();
                break;
              case '#': // Check code
                checkEnteredCode();
                break;
              default: // Enter digits
                if (numberOfCodeDigitsEntered < 4) {
                  enteredCode[numberOfCodeDigitsEntered] = keypad.key[i].kchar;
                  numberOfCodeDigitsEntered++;
                }
                break;
            }
            break;
        }
      }
    }
  }
}
