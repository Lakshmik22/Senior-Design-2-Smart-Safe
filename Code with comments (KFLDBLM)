//Keypad + Fingerprint + Display + LED + Buzzer + Lockdown Mode
#include <WiFi.h>
#include <WebServer.h>
#include <NetworkClient.h>
#include <ESP_Mail_Client.h>

#include "EEPROM.h"

#include <Arduino.h>
#include <Keypad.h>
#include <LiquidCrystal_I2C.h>

#include <Adafruit_Fingerprint.h>
#include <HardwareSerial.h>

// LED Pin Definitions
#define PIN_RED    2
#define PIN_GREEN  4
#define PIN_BLUE   5

//Keypad 
#define ROWS  4
#define COLS  4

//Email
#define SMTP_server "smtp.gmail.com"
#define SMTP_Port 465

#define sender_email "smartsafesd1@gmail.com"
#define sender_password "owtibadqkzdoakpo"

#define Recipient_email "sripriyapalli@gmail.com"
#define Recipient_name "Smart Safe User"

//EEPROM Parameters
#define EMAIL_LENGTH_BYTE 0
#define EMAIL_START_BYTE 1

//Wifi Credentials
const char* ssid = "everglades_Guest"; 
const char* password = "Dell2074";

// Buzzer Pin
const int buzzerPin = 23;

//Connect to Fingerprint
HardwareSerial mySerial(2);

Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);

//-------------------------Setup Keypad---------------------------------------------
//Define Keypad Chars
char keyMap[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};

uint8_t rowPins[ROWS] = {33, 32, 18, 19}; // GPIO pins for keypad rows
uint8_t colPins[COLS] = {14, 27, 26, 25}; // GPIO pins for keypad columns

Keypad keypad = Keypad(makeKeymap(keyMap), rowPins, colPins, ROWS, COLS);

// Code Variables
char enteredCode[4] = {' ', ' ', ' ', ' '};
char correctCode[4] = {'1', '2', '3', '4'};
int numberOfCodeDigitsEntered = 0;
int attempts = 0;
//------------------------------------------------------------------------------------

//---------------------------LCD Definitions-------------------------------------------
int lcdColumns = 16;
int lcdRows = 2;
LiquidCrystal_I2C lcd(0x27, lcdColumns, lcdRows);

void displayWelcomeMessage() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Welcome to Smart");
  lcd.setCursor(0, 1);
  lcd.print("Safe!");
  delay(4000);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Enter Code or ");
  lcd.setCursor(0, 1);
  lcd.print("Scan finger"); 
  }
//---------------------------------------------------------------------------------------

//---------------------------Keypad Functions--------------------------------------------
//Reset Code if Star is pressed
void resetCode() {
  for (int i = 0; i < 4; i++) {
    enteredCode[i] = ' ';
    enteredCode[i] = '\0';
  }
  numberOfCodeDigitsEntered = 0;

  // Reset LEDs and display
  analogWrite(PIN_RED, 0);
  analogWrite(PIN_GREEN, 0);

  displayWelcomeMessage();
}

//Check Code from Keypad
void checkEnteredCode() {
  bool codeMatched = true;

  // Loop over the correct code and check against the entered code
  for (int i = 0; i < 4; i++) {
    if (correctCode[i] != enteredCode[i]) {
      codeMatched = false;
      break;
    }
  }

  //If code is matched - Safe Unlocked
  if (codeMatched == true) {
    analogWrite(PIN_GREEN, 255);
    analogWrite(PIN_RED, 0);
    analogWrite(buzzerPin, HIGH);
    lcd.clear();
    lcd.print("Access Granted");
    delay(1000);
    analogWrite(buzzerPin, LOW);
    delay(3000);
    resetCode();

    //Send Email if Access Attempt is correct
    sendEmail(readEEPROM(), "Smart Safe Access Attempt", "We want to notify you that your safe has been accessed.");
    Serial.println("Sending safe accessed email...");

  } else {
    // If code not matched - Safe Locked
    attempts++;
    analogWrite(PIN_RED, 255);
    analogWrite(PIN_GREEN, 0);
    analogWrite(buzzerPin, HIGH);
    lcd.clear();
    lcd.print("Access Denied");
    delay(500);
    analogWrite(buzzerPin, LOW);
    delay(500);
    analogWrite(buzzerPin, HIGH);
    delay(500);
    analogWrite(buzzerPin, LOW);
    delay(3000);
    
    if(attempts != 3){ //Check for Lockdown Mode
      resetCode();
    }
  }

  //3 incorrect attempts means Lockdown Mode
  if(attempts==3){
        Serial.println("LOCKDOWN MODE ACTIVATED!");
        lcd.clear();
        lcd.print("LOCKDOWN MODE ACTIVATED!");
        analogWrite(buzzerPin, HIGH); 
        delay(1000);

        //Flash LED 3 TIMES
        analogWrite(PIN_RED,   250);
        analogWrite(PIN_GREEN, 0);
        analogWrite(PIN_BLUE,  0);
        delay(500);
        analogWrite(PIN_RED,   0);
        analogWrite(PIN_GREEN, 0);
        analogWrite(PIN_BLUE,  0);
        delay(500); 
        analogWrite(PIN_RED,   250);
        analogWrite(PIN_GREEN, 0);
        analogWrite(PIN_BLUE,  0);
        delay(500); 
        analogWrite(PIN_RED,   0);
        analogWrite(PIN_GREEN, 0);
        analogWrite(PIN_BLUE,  0);
        delay(500); 
        analogWrite(PIN_RED,   250);
        analogWrite(PIN_GREEN, 0);
        analogWrite(PIN_BLUE,  0);
        delay(500);
        analogWrite(PIN_RED,   0);
        analogWrite(PIN_GREEN, 0);
        analogWrite(PIN_BLUE,  0);

        analogWrite(buzzerPin, LOW);

        //Send Email about Lockdown Mode
        sendEmail(readEEPROM(), "High Alert: Safe Lockdown Mode Activated", "Your safe has entered lockdown mode!");
        Serial.println("Sending email about lockdown mode...");
        
        attempts=0; //Reset Attempts

      }
}
//---------------------------------------------------------------------------------------------


//------------------------------Setup for Email----------------------------------------------
// Declare the global used SMTPSession object for SMTP transport 
SMTPSession smtp;

WebServer server(80);
Session_Config config;

//Function to Save Email in Memory
String readEEPROM() {
  //Ready the first byte
  int val = EEPROM.read(EMAIL_LENGTH_BYTE);

  String emailAddress = "";

  if (val == 0) {
    Serial.println("No email address has been saved to EEPROM");
  } else {
    for (int i = 0; i < val; i++) {
      char temp = EEPROM.read(i + EMAIL_START_BYTE);
      emailAddress = emailAddress + String(temp);

    }
    
  }

  return emailAddress;

}

void clearEmailFromEEPROM() {

}

void saveEmailToEEPROM(String emailAddress) {

  //Determine length of email address
  //Save it to byte 0 in eeprom
  int emailLength = emailAddress.length();
  EEPROM.write(EMAIL_LENGTH_BYTE, emailLength);

  for (int i = 0; i < emailLength; i++) {
    Serial.print("Writing character: ");
    Serial.print(emailAddress.charAt(i));
    Serial.print(" to address: ");
    Serial.println(i + EMAIL_START_BYTE, HEX);
    
    EEPROM.write(i + EMAIL_START_BYTE, emailAddress.charAt(i));

  }

  EEPROM.commit();

  //Test by checking the saved email
  String savedEmail = readEEPROM();
  Serial.print("Saved Email: ");
  Serial.println(savedEmail);

}
//----------------------------------------------------------------------------------------------
//----------------------------------------Main Setup Function----------------------------------------
void setup() {

  Serial.begin(115200);

  EEPROM.begin(258);

  delay(3000);

  // Initialize Pins
  pinMode(PIN_RED, OUTPUT);
  pinMode(PIN_GREEN, OUTPUT);
  pinMode(PIN_BLUE, OUTPUT);
  pinMode(buzzerPin, OUTPUT);

  // Initialize LCD
  lcd.init();
  lcd.backlight();

  //Initialize Fingerprint
  mySerial.begin(57600, SERIAL_8N1, 17, 16);

  if (finger.verifyPassword()) {
    Serial.println("Fingerprint Sensor Connected");
  } else {
    Serial.println("Unable to find Sensor\nCheck Connections");
  }

  String savedEmail = readEEPROM();

  //Setup Email client
  MailClient.networkReconnect(true);

  smtp.debug(1);

  
  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // Print the ESP32's IP address
  Serial.print("ESP32 Web Server's IP address: ");
  Serial.println(WiFi.localIP());

  //-------------------------------Setup for Website-----------------------------------------------
  // Define a route to serve the HTML page
  server.on("/", HTTP_GET, []() {
    String response = "<!DOCTYPE html>"
    "<html>"
    "<head>"
        "<title>Smart Safe</title>"
        "<style>"
            "h1 {text-align: center;}"
            ".info  {font-size: 18px; color: #333;}"
            "body {"
                "background-color: lightblue;"
           " }"
            "input {padding: 10px; font-size: 16px; width: 250px;}"
           " button {"
                "padding: 10px 15px;"
                "font-size: 16px; border-radius: 5px; background-color: #007BFF; color: white;"
                "border: none; cursor: pointer;"
                "margin-left: 10px;"
           " }"
            "button:hover {background-color: #0056b3;}"
            "#main {"
                "flex-direction: column;"
            "}"
            ".f50 {"
               " flex: 0 0 50%;"
           " }"
            ".df {"
                "display: flex;"
           " }"
            ".row {"
                "padding: 10px;"
                "justify-content: center;"
           " }"
            "#contact {"
                "flex-direction: column;"
                "align-items: flex-start;"
            "}"
            "#formContainer {"
                "flex-direction: column;"
            "}"
        "</style>"
    "</head>"
    "<body>"
        "<div id=\"main\" class=\"df\">"
          "<div id=\"row1\" class=\"row df\">"
                "<h1>Welcome to Smart Safe</h1>"
           " </div>"
            "<div id=\"row2\" class=\"row f50 df\">"
                "<div id=\"formContainer\" class=\"f50\">"
                   " <h2>Please Enter Your Email Address:</h2>"
                   " <div id=\"inputWrapper\" class=\"df\">"
                        "<input type='email' id='email' name='user_email' placeholder='Enter your email here' />"
                        "<button onclick='displayMessage()'>Submit</button>"
                    "</div>"
                    "<span id='SubmitMessage'></span>"
                "</div>"
                "<div id=\"contact\" class=\"f50 df\">"
                    "<h2>Contact Us:</h2>"
                    "<span class=\"info\">Email: SmartSafeSD1@gmail.com</span>"
                    "<span class=\"info\">Phone Number: 345-456-5678</span>"
                    "<span class=\"info\">"
                        "Feel free to contact us anytime with questions or for more information about your safe!</span>"
               " </div>"
           " </div>"
        "</div>"
        "<script>"
           " function displayMessage() {"
            "document.getElementById('SubmitMessage').innerHTML = 'Thank you, please keep an eye on emails from our safe!';"
            "fetch(`/sendemail?email=${document.getElementById('email').value}`, {method: 'GET'} )"
            ".then(res => console.log(res))"
           " }"
        "</script>"
    "</body>"
"</html>";

      server.send(200, "text/html", response);
  });
//---------------------------------------------------------------------------------------------------------------

  //Save Email  to EEPROM and send Email for Confirmation
  server.on("/sendemail", HTTP_GET, []() {
    Serial.println("SendEmail endpoint triggered");
 
    String email = server.arg(0);

    saveEmailToEEPROM(email);

    sendEmail(readEEPROM(), "Email Sign Up Complete", "Thanks for registering your email with Smart Safe! Please check your email for future notifications about your safe."); 

    server.send(200, "text/html", email);
      
  });

  // Start the server
  server.begin();

  // Reset Code
  resetCode();

}
//-----------------------------------------------------------------------------------------------------------------

//-----------------------------------Main Loop Function------------------------------------------------------------
void loop() {
  server.handleClient();
  delay(2);

  //Check Keypad Attempt
  if (keypad.getKeys()) {
    for (int i = 0; i < LIST_MAX; i++) {
      if (keypad.key[i].stateChanged) { // Only find keys that have changed state
        switch (keypad.key[i].kstate) { // Check active key state
          case PRESSED:
          Serial.println(keypad.key[i].kchar);
            switch (keypad.key[i].kchar) {
              case '*': // Reset Code
                analogWrite(buzzerPin, HIGH);
                delay(200);
                analogWrite(buzzerPin, LOW);
                delay(500);
                lcd.clear();
                lcd.setCursor(0, 0);
                lcd.print("Reset");
                lcd.setCursor(0, 1);
                lcd.print("Enter Code Again");
                delay(3000);
                resetCode();
                break;
              case '#': // Check code only if # is pressed
                checkEnteredCode();
                break;
              default: // Check number of digits pressed
                if (numberOfCodeDigitsEntered < 4) {
                  enteredCode[numberOfCodeDigitsEntered] = keypad.key[i].kchar;
                  numberOfCodeDigitsEntered++;
                }
                break;
            }
            break;
        }

      }
    }
  }

  //Call Fingerprint Check Function
  getFingerprintID();
}
//-----------------------------------------------------------------------------------------

//----------------------------Check Fingerprint Function-----------------------------------
uint8_t getFingerprintID() {
  uint8_t p = finger.getImage();
  if (p != FINGERPRINT_OK) return p;

  p = finger.image2Tz();
  if (p != FINGERPRINT_OK) return p;

  p = finger.fingerSearch();

  //If fingerprint matches - Safe unlocked
  if (p == FINGERPRINT_OK) {
     Serial.println("Access granted");
    
    analogWrite(PIN_GREEN, 255);
    analogWrite(PIN_RED, 0);
    analogWrite(buzzerPin, HIGH);
  
    lcd.clear();
    lcd.print("Access Granted");

    delay(1000);
    analogWrite(buzzerPin, LOW);

    delay(3000);
    resetCode();
    
    //Send Email
    sendEmail(readEEPROM(), "Smart Safe Access Attempt", "We want to notify you that your safe has been accessed.");
    Serial.println("Sending safe accessed email...");

  } 
  
  //If fingerprint doesn't match - Safe Locked
  else if (p == FINGERPRINT_NOTFOUND) {
    Serial.println("Not Valid Finger");

    analogWrite(PIN_RED, 255);
    analogWrite(PIN_GREEN, 0);

    lcd.clear();
    lcd.print("Access Denied");

    analogWrite(buzzerPin, HIGH);
    delay(500);
    analogWrite(buzzerPin, LOW);
    delay(500);
    analogWrite(buzzerPin, HIGH);
    delay(500);
    analogWrite(buzzerPin, LOW);

    delay(3000);

    resetCode();
    
  }

  return p;
}
//------------------------------------------------------------------------------------------------------------

//----------------------------------Send Email function-----------------------------------------------------
//Function to Setup Email
void sendEmail(String emailAddress, String subject, String body) {

  ESP_Mail_Session session;

  session.server.host_name = SMTP_server ;

  session.server.port = SMTP_Port;

  session.login.email = sender_email;

  session.login.password = sender_password;

  session.login.user_domain = "";

  //Declare the message class
  SMTP_Message message;

  message.sender.name = "Smart Safe";

  message.sender.email = sender_email;

  message.subject = subject;

  message.addRecipient(Recipient_name, emailAddress);

  String textMsg = "Thank you for registering your Email with us!";

  message.text.content = body.c_str();

  message.text.charSet = "us-ascii";

  message.text.transfer_encoding = Content_Transfer_Encoding::enc_7bit;

  if (!smtp.connect(&session))

    return;

  if (!MailClient.sendMail(&smtp, &message))

    Serial.println("Error sending Email, " + smtp.errorReason());
}
//------------------------------------------------------------------------------------------
