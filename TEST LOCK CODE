#include <Arduino.h>
#include <Keypad.h>
#include <LiquidCrystal_I2C.h>
#include <Adafruit_Fingerprint.h>
#include <HardwareSerial.h>

// LED Pin Definitions
#define PIN_RED    2
#define PIN_GREEN  4
#define PIN_BLUE   13

#define RELAY_PIN 23

//Motion Sensor Code
const int trigPin = 5;
const int echoPin = 35;

//define sound speed in cm/uS
#define SOUND_SPEED 0.034
#define CM_TO_INCH 0.393701

// Buzzer Pin
const int buzzerPin = 15;

HardwareSerial mySerial(2);

//Fingerprint
Adafruit_Fingerprint finger = Adafruit_Fingerprint(&Serial2);

long duration;
float distanceCm;
float distanceInch;

// Keypad Definitions
#define ROWS  4
#define COLS  4

char keyMap[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};

uint8_t rowPins[ROWS] = {33, 32, 18, 19}; // GPIO pins for keypad rows
uint8_t colPins[COLS] = {14, 27, 26, 25}; // GPIO pins for keypad columns

Keypad keypad = Keypad(makeKeymap(keyMap), rowPins, colPins, ROWS, COLS);

// Code Variables
char enteredCode[4] = {' ', ' ', ' ', ' '};
char correctCode[4] = {'1', '2', '3', '4'};
int numberOfCodeDigitsEntered = 0;
int attempts = 0;

// LCD Definitions
int lcdColumns = 16;
int lcdRows = 2;
LiquidCrystal_I2C lcd(0x27, lcdColumns, lcdRows);

void displayWelcomeMessage() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Welcome to Smart");
  lcd.setCursor(0, 1);
  lcd.print("Safe!");
  delay(4000);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Enter Code or ");
  lcd.setCursor(0, 1);
  lcd.print("Scan finger"); 
  }


void resetCode() {
  for (int i = 0; i < 4; i++) {
    enteredCode[i] = ' ';
    enteredCode[i] = '\0';
  }
  numberOfCodeDigitsEntered = 0;

  // Reset LEDs and display
  analogWrite(PIN_RED, 0);
  analogWrite(PIN_GREEN, 0);

  displayWelcomeMessage();
}

void checkEnteredCode() {
  bool codeMatched = true;

  // Loop over the correct code and check against the entered code
  for (int i = 0; i < 4; i++) {
    if (correctCode[i] != enteredCode[i]) {
      codeMatched = false;
      break;
    }
  }

  if (codeMatched == true) {
    // Code matched - Access Granted

    analogWrite(PIN_GREEN, 255);
    analogWrite(PIN_RED, 0);
    analogWrite(buzzerPin, 250);
    lcd.clear();
    //lcd.setCursor(0, 0);
    lcd.print("Access Granted");
    delay(1000);
    analogWrite(buzzerPin, 0);

    energizeLock();

    resetCode();
  } else {
    // Code did not match - Access Denied
    attempts++;
    analogWrite(PIN_RED, 255);
    analogWrite(PIN_GREEN, 0);
    analogWrite(buzzerPin, 250);
    lcd.clear();
    //lcd.setCursor(0, 0);
    lcd.print("Access Denied");
    delay(500);
    analogWrite(buzzerPin, 0);
    delay(500);
    analogWrite(buzzerPin, 250);
    delay(500);
    analogWrite(buzzerPin, 0);
    delay(3000);

    if(attempts != 3){
      resetCode();
    }
  }

  if(attempts==3){
        Serial.println("LOCKDOWN MODE ACTIVATED!");
        lcd.clear();
        lcd.print("LOCKDOWN MODE ACTIVATED!");
        analogWrite(buzzerPin, 250); // Set to HIGH to make the buzzer sound
        delay(1000); // Wait for 3 milliseconds

        analogWrite(PIN_RED,   250);
        analogWrite(PIN_GREEN, 0);
        analogWrite(PIN_BLUE,  0);
        delay(500); // keep the color 1 second
        analogWrite(PIN_RED,   0);
        analogWrite(PIN_GREEN, 0);
        analogWrite(PIN_BLUE,  0);
        delay(500); // keep the color 1 second
        analogWrite(PIN_RED,   250);
        analogWrite(PIN_GREEN, 0);
        analogWrite(PIN_BLUE,  0);
        delay(500); // keep the color 1 second
        analogWrite(PIN_RED,   0);
        analogWrite(PIN_GREEN, 0);
        analogWrite(PIN_BLUE,  0);
        delay(500); // keep the color 1 second
        analogWrite(PIN_RED,   250);
        analogWrite(PIN_GREEN, 0);
        analogWrite(PIN_BLUE,  0);
        delay(500); // keep the color 1 second
        analogWrite(PIN_RED,   0);
        analogWrite(PIN_GREEN, 0);
        analogWrite(PIN_BLUE,  0);

        analogWrite(buzzerPin, LOW); // LOW to turn off the buzzer

        attempts=0;
      }
}

void setup() {
  // Initialize Serial Communication
  Serial.begin(115200);

  // Initialize Pins
  pinMode(PIN_RED, OUTPUT);
  pinMode(PIN_GREEN, OUTPUT);
  pinMode(PIN_BLUE, OUTPUT);
  pinMode(buzzerPin, OUTPUT);

  pinMode(RELAY_PIN, OUTPUT); 
  digitalWrite(RELAY_PIN, HIGH);  // lock the door

  pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPin, INPUT); // Sets the echoPin as an Input

  // Initialize LCD
  lcd.init();
  lcd.backlight();

  //Display Welcome Message
  //displayWelcomeMessage();

  // Reset Code
  resetCode();

  //Serial.begin(9600);

  mySerial.begin(57600, SERIAL_8N1, 17, 16);

  finger.begin(57600);

  if (finger.verifyPassword()) {
    Serial.println("Fingerprint Sensor Connected");
  } else {
    Serial.println("Unable to find Sensor\nCheck Connections");
  }

}

void loop() {

  // Clears the trigPin
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);
  
  // Calculate the distance
  distanceCm = duration * SOUND_SPEED/2;
  
  // Convert to inches
  distanceInch = distanceCm * CM_TO_INCH;
  

  if(distanceInch <2){
    Serial.print("\nMotion Detected\n");

    analogWrite(PIN_GREEN, 250);
    analogWrite(buzzerPin, 250);
    delay(500);
    analogWrite(PIN_GREEN, 0);
    analogWrite(buzzerPin, 0);

    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Motion Detected");

    delay(2000);
    resetCode();
      
  }

  if (keypad.getKeys()) {
    for (int i = 0; i < LIST_MAX; i++) {
      if (keypad.key[i].stateChanged) { // Only find keys that have changed state
        switch (keypad.key[i].kstate) { // Check active key state
          case PRESSED:
          Serial.println(keypad.key[i].kchar);
            switch (keypad.key[i].kchar) {
              case '*': // Reset
                analogWrite(buzzerPin, 250);
                delay(200);
                analogWrite(buzzerPin, 0);
                delay(500);
                lcd.clear();
                lcd.setCursor(0, 0);
                lcd.print("Reset");
                lcd.setCursor(0, 1);
                lcd.print("Enter Code Again");
                delay(2000);
                resetCode();
                break;
              case '#': // Check code
                checkEnteredCode();
                break;
              default: // Enter digits
                if (numberOfCodeDigitsEntered < 4) {
                  enteredCode[numberOfCodeDigitsEntered] = keypad.key[i].kchar;
                  numberOfCodeDigitsEntered++;
                }
                break;
            }
            break;
        }

      }
    }
  }
   // FINGERPRINT PROCESSING
  getFingerprintID();
}

void energizeLock(){

  digitalWrite(RELAY_PIN, LOW); // unlock the door
    delay(10000);
    digitalWrite(RELAY_PIN, HIGH);  // lock the door
    delay(10000);
}

uint8_t getFingerprintID() {
  uint8_t p = finger.getImage();
  if (p != FINGERPRINT_OK) return p;

  p = finger.image2Tz();
  if (p != FINGERPRINT_OK) return p;

  p = finger.fingerSearch();
  if (p == FINGERPRINT_OK) {
     Serial.println("Access granted");
    
    // Code matched - Access Granted
    analogWrite(PIN_GREEN, 255);
    analogWrite(PIN_RED, 0);
    analogWrite(buzzerPin, 250);
  
    lcd.clear();
    //lcd.setCursor(0, 0);
    lcd.print("Access Granted");

    delay(1000);
    analogWrite(buzzerPin, 0);

    energizeLock();

    resetCode();

  } else if (p == FINGERPRINT_NOTFOUND) {
    Serial.println("Not Valid Finger");

    analogWrite(PIN_RED, 255);
    analogWrite(PIN_GREEN, 0);

    lcd.clear();
    //lcd.setCursor(0, 0);
    lcd.print("Access Denied");

    analogWrite(buzzerPin, 250);
    delay(500);
    analogWrite(buzzerPin, 0);
    delay(500);
    analogWrite(buzzerPin, 250);
    delay(500);
    analogWrite(buzzerPin, 0);

    delay(4000);

    resetCode();
    
  }

  return p;
}


