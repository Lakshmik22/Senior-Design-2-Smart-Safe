#include <Arduino.h>
#include <Keypad.h>
#include <LiquidCrystal_I2C.h>

// LED Pin Definitions
#define PIN_RED    2
#define PIN_GREEN  4
#define PIN_BLUE   5

// Buzzer Pin
const int buzzerPin = 23;

// Keypad Definitions
#define ROWS  4
#define COLS  4

char keyMap[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};

uint8_t rowPins[ROWS] = {33, 32, 18, 19}; // GPIO pins for keypad rows
uint8_t colPins[COLS] = {14, 27, 26, 25}; // GPIO pins for keypad columns

Keypad keypad = Keypad(makeKeymap(keyMap), rowPins, colPins, ROWS, COLS);

// Code Variables
char enteredCode[4] = {' ', ' ', ' ', ' '};
char correctCode[4] = {'1', '2', '3', '4'};
int numberOfCodeDigitsEntered = 0;
int attempts = 0;

// LCD Definitions
int lcdColumns = 16;
int lcdRows = 2;
LiquidCrystal_I2C lcd(0x27, lcdColumns, lcdRows);


void resetCode() {
  for (int i = 0; i < 4; i++) {
    enteredCode[i] = ' ';
    enteredCode[i] = '\0';
  }
  numberOfCodeDigitsEntered = 0;

  // Reset LEDs and display
  analogWrite(PIN_RED, 0);
  analogWrite(PIN_GREEN, 0);
}


void checkEnteredCode() {
  bool codeMatched = true;

  // Loop over the correct code and check against the entered code
  for (int i = 0; i < 4; i++) {
    if (correctCode[i] != enteredCode[i]) {
      codeMatched = false;
      break;
    }
  }

  if (codeMatched == true) {
    // Code matched - Access Granted
    analogWrite(PIN_GREEN, 255);
    analogWrite(PIN_RED, 0);
    analogWrite(buzzerPin, HIGH);
    lcd.clear();
    //lcd.setCursor(0, 0);
    lcd.print("Access Granted");
    delay(1000);
    analogWrite(buzzerPin, LOW);
    delay(500);
    resetCode();
  } else {
    // Code did not match - Access Denied
    attempts++;
    analogWrite(PIN_RED, 255);
    analogWrite(PIN_GREEN, 0);
    analogWrite(buzzerPin, HIGH);
    lcd.clear();
    //lcd.setCursor(0, 0);
    lcd.print("Access Denied");
    delay(500);
    analogWrite(buzzerPin, LOW);
    delay(500);
    analogWrite(buzzerPin, HIGH);
    delay(500);
    analogWrite(buzzerPin, LOW);
    resetCode();
  }

  if(attempts==3){
        Serial.println("LOCKDOWN MODE ACTIVATED!");
        lcd.clear();
        lcd.print("LOCKDOWN MODE ACTIVATED!");
        analogWrite(buzzerPin, HIGH); // Set to HIGH to make the buzzer sound
        delay(1000); // Wait for 3 milliseconds

        analogWrite(PIN_RED,   250);
        analogWrite(PIN_GREEN, 0);
        analogWrite(PIN_BLUE,  0);
        delay(500); // keep the color 1 second
        analogWrite(PIN_RED,   0);
        analogWrite(PIN_GREEN, 0);
        analogWrite(PIN_BLUE,  0);
        delay(500); // keep the color 1 second
        analogWrite(PIN_RED,   250);
        analogWrite(PIN_GREEN, 0);
        analogWrite(PIN_BLUE,  0);
        delay(500); // keep the color 1 second
        analogWrite(PIN_RED,   0);
        analogWrite(PIN_GREEN, 0);
        analogWrite(PIN_BLUE,  0);
        delay(500); // keep the color 1 second
        analogWrite(PIN_RED,   250);
        analogWrite(PIN_GREEN, 0);
        analogWrite(PIN_BLUE,  0);
        delay(500); // keep the color 1 second
        analogWrite(PIN_RED,   0);
        analogWrite(PIN_GREEN, 0);
        analogWrite(PIN_BLUE,  0);

        analogWrite(buzzerPin, LOW); // LOW to turn off the buzzer

        attempts=0;
      }
}

void setup() {
  // Initialize Serial Communication
  Serial.begin(115200);

  // Initialize Pins
  pinMode(PIN_RED, OUTPUT);
  pinMode(PIN_GREEN, OUTPUT);
  pinMode(PIN_BLUE, OUTPUT);
  pinMode(buzzerPin, OUTPUT);

  // Initialize LCD
  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("Welcome to Smart");
  lcd.setCursor(0, 1);
  lcd.print("Safe!");
  delay(3000);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Enter Code or ");
  lcd.setCursor(0, 1);
  lcd.print("Scan finger");

  // Reset Code
  resetCode();
}

void loop() {
  if (keypad.getKeys()) {
    for (int i = 0; i < LIST_MAX; i++) {
      if (keypad.key[i].stateChanged) { // Only find keys that have changed state
        switch (keypad.key[i].kstate) { // Check active key state
          case PRESSED:
          Serial.println(keypad.key[i].kchar);
            switch (keypad.key[i].kchar) {
              case '*': // Reset
                analogWrite(buzzerPin, HIGH);
                delay(200);
                analogWrite(buzzerPin, LOW);
                delay(500);
                lcd.clear();
                lcd.setCursor(0, 0);
                lcd.print("Reset");
                lcd.setCursor(0, 1);
                lcd.print("Enter Code Again");
                delay(2000);
                resetCode();
                break;
              case '#': // Check code
                checkEnteredCode();
                break;
              default: // Enter digits
                if (numberOfCodeDigitsEntered < 4) {
                  enteredCode[numberOfCodeDigitsEntered] = keypad.key[i].kchar;
                  numberOfCodeDigitsEntered++;
                }
                break;
            }
            break;
        }

      }
    }
  }
}

