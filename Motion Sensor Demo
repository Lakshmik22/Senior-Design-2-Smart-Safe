const int trigPin = 5;
const int echoPin = 18;
const int buzzerPin = 15;
const int LEDpin = 4;

//define sound speed in cm/uS
#define SOUND_SPEED 0.034
#define CM_TO_INCH 0.393701

long duration;
float distanceCm;
float distanceInch;

void setup() {
  Serial.begin(9600); // Starts the serial communication
  pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPin, INPUT); // Sets the echoPin as an Input
  pinMode(buzzerPin, OUTPUT); //Sets buzzerPin as an Output
  pinMode(LEDpin, OUTPUT);
}

void loop() {

  // Clears LEDpin
  analogWrite(LEDpin, 0);
  // Clears the trigPin
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);
  
  // Calculate the distance
  distanceCm = duration * SOUND_SPEED/2;
  
  // Convert to inches
  distanceInch = distanceCm * CM_TO_INCH;
  
  if (distanceInch > 5 && distanceInch < 7){
    Serial.print("MOTION DETECTED at ");
    Serial.print(distanceInch);
    Serial.println(" inches");
    Serial.println("Sending notification...");
    analogWrite(LEDpin, 250);
    analogWrite(buzzerPin, 250);
    delay(500);
    analogWrite(LEDpin, 0);
    analogWrite(buzzerPin, 0);
  }
  else{
    // Prints the distance in the Serial Monitor
    Serial.print("Distance (inch): ");
    Serial.println(distanceInch);
  }
  delay(500);
}
