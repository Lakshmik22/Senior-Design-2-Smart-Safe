#include <Adafruit_Fingerprint.h>
#include <HardwareSerial.h>
#include <Keypad.h>

HardwareSerial mySerial(2);

#define ROWS  4 // four rows
#define COLS  4 // three columns

#define PIN_RED    2 // GPIO2
#define PIN_GREEN  4 // GPIO4
#define PIN_BLUE   5 // GPIO5

char keys[ROWS][COLS] = {
  {'1','2','3', 'A'},
  {'4','5','6', 'B'},
  {'7','8','9', 'C'},
  {'*','0','#', 'D'}
};

uint8_t colPins[COLS] = {13, 12, 14, 27}; // column pins
uint8_t rowPins[ROWS] = {26, 25, 33, 32}; // row pins

Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

const String password = "1234"; // change your password here
String input_password;

const int buzzerPin = 15; // the buzzer pin

int attempts = 0;

Adafruit_Fingerprint finger = Adafruit_Fingerprint(&Serial2);

void setup() {
  Serial.begin(9600);
  mySerial.begin(57600, SERIAL_8N1, 17, 16);

  input_password.reserve(32); // maximum input characters is 33, change if needed
  pinMode(PIN_RED, OUTPUT);
  pinMode(PIN_GREEN, OUTPUT);
  pinMode(PIN_BLUE, OUTPUT);
  pinMode(buzzerPin, OUTPUT); // Set as output
  finger.begin(57600);

  if (finger.verifyPassword()) {
    Serial.println("Fingerprint Sensor Connected");
  } else {
    Serial.println("Unable to find Sensor\nCheck Connections");
  }
}

void loop() {
  // KEYPAD PROCESSING
  char key = keypad.getKey();
  if (key) {
    if (key == '*') {
      input_password = ""; // clear input password
    } else if (key == '#') {
      if (password == input_password) {
        analogWrite(PIN_RED, 0);
        analogWrite(PIN_GREEN, 250);
        analogWrite(PIN_BLUE, 0);
        delay(1000);
        analogWrite(PIN_RED, 0);
        analogWrite(PIN_GREEN, 0);
        analogWrite(PIN_BLUE, 0);
      } else {
        analogWrite(PIN_RED, 250);
        analogWrite(PIN_GREEN, 0);
        analogWrite(PIN_BLUE, 0);
        delay(1000);
        analogWrite(PIN_RED, 0);
        analogWrite(PIN_GREEN, 0);
        analogWrite(PIN_BLUE, 0);
        attempts++;
      }

      if (attempts == 3) {
        digitalWrite(buzzerPin, HIGH);
        delay(1000);
        digitalWrite(buzzerPin, LOW);
        attempts = 0;
      }

      input_password = ""; // clear input password
    } else {
      input_password += key;
    }
  }

  // FINGERPRINT PROCESSING
  getFingerprintID();
}

uint8_t getFingerprintID() {
  uint8_t p = finger.getImage();
  if (p != FINGERPRINT_OK) return p;

  p = finger.image2Tz();
  if (p != FINGERPRINT_OK) return p;

  p = finger.fingerSearch();
  if (p == FINGERPRINT_OK) {
     Serial.println("Access granted");
    analogWrite(PIN_RED, 0);
    analogWrite(PIN_GREEN, 250);
    analogWrite(PIN_BLUE, 0);
    delay(1000);
    analogWrite(PIN_RED, 0);
    analogWrite(PIN_GREEN, 0);
    analogWrite(PIN_BLUE, 0);

    delay(2000); // Debounce delay to ensure no repeated triggers

  } else if (p == FINGERPRINT_NOTFOUND) {
     Serial.println("Not Valid Finger");
    analogWrite(PIN_RED, 250);
    analogWrite(PIN_GREEN, 0);
    analogWrite(PIN_BLUE, 0);
    delay(1000);
    analogWrite(PIN_RED, 0);
    analogWrite(PIN_GREEN, 0);
    analogWrite(PIN_BLUE, 0);

    delay(2000); // Debounce delay to ensure no repeated triggers
    
  }

  return p;
}
