#include <Arduino.h>
#include <Keypad.h>
#include <Wire.h>
#include <Adafruit_Fingerprint.h>
#include <HardwareSerial.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// LED Pin Definitions
#define PIN_RED    2
#define PIN_GREEN  4
#define PIN_BLUE   13

#define RELAY_PIN 23

//Motion Sensor Code
const int trigPin = 5;
const int echoPin = 35;

bool inLockdownMode = false;

//define sound speed in cm/uS
#define SOUND_SPEED 0.034
#define CM_TO_INCH 0.393701

//Door sensor
#define DOOR_SENSOR_PIN 12
long DOOR_OPEN_ALARM_TIMEOUT = 10000;
bool isDoorOpen = false;
long doorOpenTime = 0;
bool shouldSendEmail = true;

// Buzzer Pin
const int buzzerPin = 15;

HardwareSerial mySerial(2);

//Fingerprint
Adafruit_Fingerprint finger = Adafruit_Fingerprint(&Serial2);

long duration;
float distanceCm;
float distanceInch;

// Keypad Definitions
#define ROWS  4
#define COLS  4

char keyMap[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};

uint8_t rowPins[ROWS] = {33, 32, 18, 19}; // GPIO pins for keypad rows
uint8_t colPins[COLS] = {14, 27, 26, 25}; // GPIO pins for keypad columns

Keypad keypad = Keypad(makeKeymap(keyMap), rowPins, colPins, ROWS, COLS);

// Code Variables
char enteredCode[4] = {' ', ' ', ' ', ' '};
char correctCode[4] = {'1', '2', '3', '4'};
int numberOfCodeDigitsEntered = 0;
int attempts = 0;

bool safeIsUnlocked = false;

// OLED Definitions
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

// Function that displasy centered text
void displayCenteredText(const char* text, int y) {
  int16_t x1, y1;
  uint16_t w, h;
  
  display.getTextBounds(text, 0, y, &x1, &y1, &w, &h); // Get text dimensions
  
  int x = (SCREEN_WIDTH - w) / 2; // Center text horizontally

  display.setCursor(x, y);
  display.print(text);
}

void displayWelcomeMessage() {
  display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(WHITE);
    displayCenteredText("SmartSafe", 5);
    displayCenteredText("Enter code", 20);
    displayCenteredText("or", 35);
    displayCenteredText("use fingerprint", 50);
    display.display();
  }

void resetCode() {
  for (int i = 0; i < 4; i++) {
    enteredCode[i] = ' ';
    enteredCode[i] = '\0';
  }
  numberOfCodeDigitsEntered = 0;

  // Reset LEDs and display
  analogWrite(PIN_RED, 0);
  analogWrite(PIN_GREEN, 0);

  displayWelcomeMessage();

}

void checkEnteredCode() {
  bool codeMatched = true;

  // Loop over the correct code and check against the entered code
  for (int i = 0; i < 4; i++) {
    if (correctCode[i] != enteredCode[i]) {
      codeMatched = false;
      break;
    }
  }

  if (codeMatched == true) {
    // Code matched - Access Granted
    analogWrite(PIN_GREEN, 255);
    analogWrite(PIN_RED, 0);
    analogWrite(buzzerPin, 250);
    
    Serial.println("Access granted");
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(WHITE);
    displayCenteredText("SmartSafe", 5);
    display.setTextSize(1);
    displayCenteredText("ACCESS", 20);
    displayCenteredText("GRANTED" ,35);
    display.display();


    delay(1000);
    analogWrite(buzzerPin, 0);

    energizeLock();

    attempts = 0;
    resetCode();
  } else {
  // Code did not match - Access Denied
    attempts++;
    analogWrite(PIN_RED, 255);
    analogWrite(PIN_GREEN, 0);
    analogWrite(buzzerPin, 250);
  
    Serial.println("Access denied");
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(WHITE);
    displayCenteredText("SmartSafe", 5);
    display.setTextSize(1);
    displayCenteredText("ACCESS", 20);
    displayCenteredText("DENIED" ,35);
	
	    // Display "X" symbols horizontally for each failed attempt
    display.setTextSize(1);
    int startX = 30; // Start position for the first "X"
    int yPosition = 50; // Fixed y position for all "X"s

    for (int i = 0; i < attempts; i++) {
      display.setCursor(startX + (i * 20), yPosition); // Move right for each "X"
      display.print("X");
    }
    display.display();

    delay(500);
    analogWrite(buzzerPin, 0);
    delay(500);
    analogWrite(buzzerPin, 250);
    delay(500);
    analogWrite(buzzerPin, 0);
    delay(1000);

    if(attempts != 4){
      resetCode();
    }

  }

  if(attempts==4){
        Serial.println("LOCKDOWN MODE ACTIVATED!");
        inLockdownMode = true;
        
        analogWrite(buzzerPin, 250); // Set to HIGH to make the buzzer sound
        analogWrite(PIN_RED, 250); //red on
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(WHITE);
        displayCenteredText("SmartSafe", 5);
        display.setTextSize(1);
        displayCenteredText("LOCKDOWN", 20);
        displayCenteredText("ACTIVATED" ,35);
        display.display();

        delay(500); // red off
        analogWrite(PIN_RED, 0);
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(WHITE);
        displayCenteredText("SmartSafe", 5);
        display.display();

        delay(500); // red on
        analogWrite(PIN_RED, 250);
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(WHITE);
        displayCenteredText("SmartSafe", 5);
        display.setTextSize(1);
        displayCenteredText("LOCKDOWN", 20);
        displayCenteredText("ACTIVATED" ,35);
        display.display();

        delay(500); // red off
        analogWrite(PIN_RED, 0);
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(WHITE);
        displayCenteredText("SmartSafe", 5);
        display.display();

        delay(500); // red on
        analogWrite(PIN_RED, 250);
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(WHITE);
        displayCenteredText("SmartSafe", 5);
        display.setTextSize(1);
        displayCenteredText("LOCKDOWN", 20);
        displayCenteredText("ACTIVATED" ,35);
        display.display();

        delay(500); // red off
        analogWrite(PIN_RED, 0);
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(WHITE);
        displayCenteredText("SmartSafe", 5);
        display.display();

        delay(500); // red on
        analogWrite(PIN_RED, 250);
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(WHITE);
        displayCenteredText("SmartSafe", 5);
        display.setTextSize(1);
        displayCenteredText("LOCKDOWN", 20);
        displayCenteredText("ACTIVATED" ,35);
        display.display();

        delay(500); // red off
        analogWrite(PIN_RED, 0);
        analogWrite(buzzerPin, 0); // LOW to turn off the buzzer

        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(WHITE);
        displayCenteredText("SmartSafe", 5);
        display.setTextSize(1);
        displayCenteredText("LOCKDOWN", 20);
        displayCenteredText("ACTIVATED", 35);
        displayCenteredText("Use fingerprint", 50);
        display.display();

        attempts=0;
      }
}

void setup() {
  // Initialize Serial Communication
  Serial.begin(115200);

  // Initialize Pins
  pinMode(PIN_RED, OUTPUT);
  pinMode(PIN_GREEN, OUTPUT);
  pinMode(PIN_BLUE, OUTPUT);
  pinMode(buzzerPin, OUTPUT);

  pinMode(RELAY_PIN, OUTPUT); 
  digitalWrite(RELAY_PIN, HIGH);  // lock the door

  pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPin, INPUT); // Sets the echoPin as an Input

   pinMode(DOOR_SENSOR_PIN, INPUT_PULLUP);

   // Initialize I2C (Ensure correct pins are used)
  Wire.begin(21, 22);  // Default I2C pins for ESP32 (modify if needed)
  delay(100);          // Allow time for I2C to stabilize

  // Initialize OLED display
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Check OLED I2C address (default 0x3C)
    Serial.println("SSD1306 allocation failed");
    for (;;); // Halt the program if the display doesn't initialize
  }

  //clear display and setup display settings
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  displayCenteredText("SmartSafe", 5);
  displayCenteredText("Enter code", 20);
  displayCenteredText("or", 35);
  displayCenteredText("use fingerprint", 50);
  display.display();

  // Reset Code
  resetCode();

  mySerial.begin(57600, SERIAL_8N1, 17, 16);

  finger.begin(57600);

  if (finger.verifyPassword()) {
    Serial.println("Fingerprint Sensor Connected");
  } else {
    Serial.println("Unable to find Sensor\nCheck Connections");
  }

}

void loop() {

  checkDoor();
  
  // Clears the trigPin
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);
  
  // Calculate the distance
  distanceCm = duration * SOUND_SPEED/2;
  
  // Convert to inches
  distanceInch = distanceCm * CM_TO_INCH;
  

  if(distanceInch <2){
    Serial.print("\nMotion Detected\n");

    analogWrite(PIN_BLUE, 250);
    analogWrite(buzzerPin, 250);
    delay(500);
    analogWrite(PIN_BLUE, 0);
    analogWrite(buzzerPin, 0);

    display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(WHITE);
        displayCenteredText("SmartSafe", 5);
        display.setTextSize(1);
        displayCenteredText("Motion Detected", 20);
        display.display();

    delay(2000);
    resetCode();
      
  }

  if (inLockdownMode == false && keypad.getKeys()) {
    for (int i = 0; i < LIST_MAX; i++) {
      if (keypad.key[i].stateChanged) { // Only find keys that have changed state
        switch (keypad.key[i].kstate) { // Check active key state
          case PRESSED:
          Serial.println(keypad.key[i].kchar);
            switch (keypad.key[i].kchar) {
              case '*': // Reset
                analogWrite(buzzerPin, 250);
                delay(200);
                analogWrite(buzzerPin, 0);
                delay(500);

                display.clearDisplay();
                display.setTextSize(1);
                display.setTextColor(WHITE);
                displayCenteredText("SmartSafe", 5);
                display.setTextSize(1);
                displayCenteredText("Reset", 20);
                displayCenteredText("Enter Code Again",35);
                display.display();

                delay(2000);
                resetCode();
                break;
              case '#': // Check code
                checkEnteredCode();
                break;
              default: // Enter digits
                if (numberOfCodeDigitsEntered < 4) {
                  enteredCode[numberOfCodeDigitsEntered] = keypad.key[i].kchar;
                  numberOfCodeDigitsEntered++;

                display.clearDisplay();
                display.setTextSize(1);
                display.setTextColor(WHITE);
                displayCenteredText("SmartSafe", 5);
                display.setTextSize(2);
                display.setCursor(20, 25);

                for (int i = 0; i < numberOfCodeDigitsEntered; i++){
                  display.print("* ");
                }
                display.display();
                }
                break;
            }
            break;
        }

      }
    }
  }
   // FINGERPRINT PROCESSING
  getFingerprintID();
}

void checkDoor() {

  if (isDoorOpen == true) {
    //Door is currently open  

    if (digitalRead(DOOR_SENSOR_PIN) == HIGH) {
      //Door is still open
      //Check the time to see if it's time to send the email
      /*Serial.print(millis());
      Serial.print(" - ");
      Serial.print(doorOpenTime);
      Serial.print(" - ");
      Serial.println(DOOR_OPEN_ALARM_TIMEOUT);*/
      if (millis() >= doorOpenTime + DOOR_OPEN_ALARM_TIMEOUT && shouldSendEmail == true) {
        //Send the email
        Serial.println("Sending door open alarm email");
        digitalWrite(PIN_BLUE, 255);
        shouldSendEmail = false;
      }
    } else {
      //Door is now closed
      Serial.println("Door is now closed");
      digitalWrite(PIN_BLUE, 0);
      shouldSendEmail = true;
      safeIsUnlocked = false;
      delay(50);
      isDoorOpen = false;
      resetCode();
    }
    
  } else {
    
    //Door was closed
    if (digitalRead(DOOR_SENSOR_PIN) == HIGH) {
      Serial.println("Door is now opened");
      doorOpenTime = millis();

      if (safeIsUnlocked) {
        
        delay(50);
        isDoorOpen = true;

        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(WHITE);
        display.setTextSize(1);
        displayCenteredText("SmartSafe", 5);      
        displayCenteredText("Door Open", 20);
        display.display();

      } else {
        //The door is opened but the safe was never unlocked
        isDoorOpen = true;
        
        Serial.println("Safe has been tampered with. Door opended without being unlocked");
        //Send the email immediately
      }
      
    }
    
  }

}

void energizeLock(){

  safeIsUnlocked = true;

    digitalWrite(RELAY_PIN, LOW); // unlock the door
    delay(5000);
    digitalWrite(RELAY_PIN, HIGH);  // lock the door
    delay(5000);
}

uint8_t getFingerprintID() {
  uint8_t p = finger.getImage();
  if (p != FINGERPRINT_OK) return p;

  p = finger.image2Tz();
  if (p != FINGERPRINT_OK) return p;

  p = finger.fingerSearch();
  if (p == FINGERPRINT_OK) {
     Serial.println("Access granted");
    
    // Code matched - Access Granted
    analogWrite(PIN_GREEN, 255);
    analogWrite(PIN_RED, 0);
    analogWrite(buzzerPin, 250);

    if (inLockdownMode == true) {
      inLockdownMode = false;
      Serial.println("Lockdown Mode Deactivated");
      display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(WHITE);
        displayCenteredText("SmartSafe", 5);
        display.setTextSize(1);
        displayCenteredText("LOCKDOWN", 20);
        displayCenteredText("DEACTIVATED" ,35);
        display.display();
      delay(3000);

    }

    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(WHITE);
    displayCenteredText("SmartSafe", 5);
    display.setTextSize(1);
    displayCenteredText("ACCESS", 20);
    displayCenteredText("GRANTED" ,35);
    display.display();

    delay(1000);
    analogWrite(buzzerPin, 0);

    energizeLock();

    resetCode();

  } else if (p == FINGERPRINT_NOTFOUND) {
    Serial.println("Not Valid Finger");

    analogWrite(PIN_RED, 255);
    analogWrite(PIN_GREEN, 0);

    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(WHITE);
    displayCenteredText("SmartSafe", 5);
    display.setTextSize(1);
    displayCenteredText("ACCESS", 20);
    displayCenteredText("DENIED" ,35);
    display.display();

    analogWrite(buzzerPin, 250);
    delay(500);
    analogWrite(buzzerPin, 0);
    delay(500);
    analogWrite(buzzerPin, 250);
    delay(500);
    analogWrite(buzzerPin, 0);

    delay(4000);

    //Still in Lockdown Mode
    if(inLockdownMode == true){
       display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(WHITE);
        displayCenteredText("SmartSafe", 5);
        display.setTextSize(1);
        displayCenteredText("LOCKDOWN", 20);
        displayCenteredText("ACTIVATED", 35);
        displayCenteredText("Use fingerprint", 50);
        display.display();
      Serial.println("Still in Lockdown Mode");
    } else {
      resetCode();
    }
    
  }

  return p;
}


