 
#include <WiFi.h>
#include <WebServer.h>
#include <NetworkClient.h>
#include <ESP_Mail_Client.h>

#include "EEPROM.h"

#include <Arduino.h>
#include <Keypad.h>
#include <LiquidCrystal_I2C.h>

#include <Adafruit_Fingerprint.h>
#include <HardwareSerial.h>

// LED Pin Definitions
#define PIN_RED    2
#define PIN_GREEN  4
#define PIN_BLUE   13

#define RELAY_PIN 23

//EEPROM Parameters
#define EMAIL_LENGTH_BYTE 0
#define EMAIL_START_BYTE 1

//Motion Sensor Code
const int trigPin1 = 5;
const int echoPin1 = 35;

bool shouldReportDistance = true;
long timeOfNextMotionTrigger = 0;
#define MOTION_REPORT_DELAY 1000 * 30

//define sound speed in cm/uS
#define SOUND_SPEED 0.034
#define CM_TO_INCH 0.393701

//door sensor
#define DOOR_SENSOR_PIN 12
long DOOR_OPEN_ALARM_TIMEOUT = 20000;
bool isDoorOpen = false;
long doorOpenTime = 0;
bool shouldSendEmail = true;

// Buzzer Pin
const int buzzerPin = 15;

HardwareSerial mySerial(2);

//Fingerprint
Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);

// Keypad Definitions
#define ROWS  4
#define COLS  4

long duration1;
float distanceCm1;
float distanceInch1;
 
const char* ssid = "everglades_Guest"; // Change as needed
const char* password = "Dell2074"; // Change as needed

bool inLockdownMode = false;

#define SMTP_server "smtp.gmail.com"
#define SMTP_Port 465

#define sender_email "smartsafesd1@gmail.com"
#define sender_password "owtibadqkzdoakpo"

#define Recipient_email "sripriyapalli@gmail.com"
#define Recipient_name "Smart Safe User"



char keyMap[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};

uint8_t rowPins[ROWS] = {33, 32, 18, 19}; // GPIO pins for keypad rows
uint8_t colPins[COLS] = {14, 27, 26, 25}; // GPIO pins for keypad columns

Keypad keypad = Keypad(makeKeymap(keyMap), rowPins, colPins, ROWS, COLS);

// Code Variables
char enteredCode[4] = {' ', ' ', ' ', ' '};
char correctCode[4] = {'1', '2', '3', '4'};
int numberOfCodeDigitsEntered = 0;
int attempts = 0;

// LCD Definitions
int lcdColumns = 16;
int lcdRows = 2;
LiquidCrystal_I2C lcd(0x27, lcdColumns, lcdRows);

void displayWelcomeMessage() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Welcome to Smart");
  lcd.setCursor(0, 1);
  lcd.print("Safe!");
  delay(4000);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Enter Code or ");
  lcd.setCursor(0, 1);
  lcd.print("Scan finger"); 
  }

void resetCode() {
  for (int i = 0; i < 4; i++) {
    enteredCode[i] = ' ';
    enteredCode[i] = '\0';
  }
  numberOfCodeDigitsEntered = 0;

  // Reset LEDs and display
  analogWrite(PIN_RED, 0);
  analogWrite(PIN_GREEN, 0);

  displayWelcomeMessage();
}

void checkEnteredCode() {
  bool codeMatched = true;

  // Loop over the correct code and check against the entered code
  for (int i = 0; i < 4; i++) {
    if (correctCode[i] != enteredCode[i]) {
      codeMatched = false;
      break;
    }
  }

  if (codeMatched == true) {
    // Code matched - Access Granted
    Serial.println("Access granted");

    analogWrite(PIN_GREEN, 255);
    analogWrite(PIN_RED, 0);
    analogWrite(buzzerPin, 250);
    lcd.clear();
    //lcd.setCursor(0, 0);
    lcd.print("Access Granted");
    delay(1000);
    analogWrite(buzzerPin, 0);

    energizeLock();

    attempts = 0;

    //Send Email if Access Attempt is correct
    sendEmail(readEEPROM(), "Smart Safe Access Attempt", "Hello Safe User, \n\nWe wanted to notify you that your safe was accessed. Please review and confirm this activity to ensure it was authorized. You may check the timestamp on this email for the exact time of access. If this was an unauthorized attempt, we recommend securing the safe and taking extra precautions. \n\nThank you, \nSmart Safe");
    Serial.println("Sending safe accessed email...");

    resetCode();

  } else {
    // Code did not match - Access Denied
    attempts++;
    analogWrite(PIN_RED, 255);
    analogWrite(PIN_GREEN, 0);
    analogWrite(buzzerPin, 250);
    lcd.clear();
    //lcd.setCursor(0, 0);
    lcd.print("Access Denied");
    delay(500);
    analogWrite(buzzerPin, 0);
    delay(500);
    analogWrite(buzzerPin, 250);
    delay(500);
    analogWrite(buzzerPin, 0);
    delay(3000);
    
    if(attempts != 3){
      resetCode();
    }
  }

  if(attempts==3){
        Serial.println("LOCKDOWN MODE ACTIVATED!");
         inLockdownMode = true;

        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("LOCKDOWN MODE");
        lcd.setCursor(0, 1);
        lcd.print("ACTIVATED!");

        analogWrite(buzzerPin, 250); // Set to HIGH to make the buzzer sound
        delay(1000); // Wait for 3 milliseconds

        analogWrite(PIN_RED,   250);
        analogWrite(PIN_GREEN, 0);
        analogWrite(PIN_BLUE,  0);
        delay(500); // keep the color 1 second
        analogWrite(PIN_RED,   0);
        analogWrite(PIN_GREEN, 0);
        analogWrite(PIN_BLUE,  0);
        delay(500); // keep the color 1 second
        analogWrite(PIN_RED,   250);
        analogWrite(PIN_GREEN, 0);
        analogWrite(PIN_BLUE,  0);
        delay(500); // keep the color 1 second
        analogWrite(PIN_RED,   0);
        analogWrite(PIN_GREEN, 0);
        analogWrite(PIN_BLUE,  0);
        delay(500); // keep the color 1 second
        analogWrite(PIN_RED,   250);
        analogWrite(PIN_GREEN, 0);
        analogWrite(PIN_BLUE,  0);
        delay(500); // keep the color 1 second
        analogWrite(PIN_RED,   0);
        analogWrite(PIN_GREEN, 0);
        analogWrite(PIN_BLUE,  0);

        analogWrite(buzzerPin, 0); // LOW to turn off the buzzer

        //Send Email about Lockdown Mode
        sendEmail(readEEPROM(), "High Alert: Safe Lockdown Mode Activated", "Hello Safe User, \n\nThis is a high-priority alert to inform you that your safe has entered Lockdown Mode. Lockdown Mode is activated after multiple failed access attempts, and no further access will be allowed until a registered user disengages it using their fingerprint. If this was an unauthorized attempt, we recommend taking necessary precautions. \n\nThank you, \nSmart Safe");
        Serial.println("Sending email about lockdown mode...");
        
        attempts=0;

      }
}




// Declare the global used SMTPSession object for SMTP transport 
SMTPSession smtp;


WebServer server(80);
Session_Config config;

String readEEPROM() {
  //Ready the first byte
  int val = EEPROM.read(EMAIL_LENGTH_BYTE);

  String emailAddress = "";

  if (val == 0) {
    Serial.println("No email address has been saved to EEPROM");
  } else {
    for (int i = 0; i < val; i++) {

      char temp = EEPROM.read(i + EMAIL_START_BYTE);
      emailAddress = emailAddress + String(temp);
      //Serial.println(temp);

    }
    
  }

  return emailAddress;

}

void clearEmailFromEEPROM() {

}

void saveEmailToEEPROM(String emailAddress) {

  //Determine length of email address
  //Save it to byte 0 in eeprom
  int emailLength = emailAddress.length();
  EEPROM.write(EMAIL_LENGTH_BYTE, emailLength);

  for (int i = 0; i < emailLength; i++) {
    Serial.print("Writing character: ");
    Serial.print(emailAddress.charAt(i));
    Serial.print(" to address: ");
    Serial.println(i + EMAIL_START_BYTE, HEX);
    
    EEPROM.write(i + EMAIL_START_BYTE, emailAddress.charAt(i));

  }

  EEPROM.commit();

  //Test by checking the saved email
  String savedEmail = readEEPROM();
  Serial.print("Saved Email: ");
  Serial.println(savedEmail);

}

void setup() {

  Serial.begin(115200);

  EEPROM.begin(258);

  delay(3000);

  // Initialize Pins
  pinMode(PIN_RED, OUTPUT);
  pinMode(PIN_GREEN, OUTPUT);
  pinMode(PIN_BLUE, OUTPUT);
  pinMode(buzzerPin, OUTPUT);

  pinMode(RELAY_PIN, OUTPUT); 

  pinMode(trigPin1, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPin1, INPUT); // Sets the echoPin as an Input

  pinMode(DOOR_SENSOR_PIN, INPUT_PULLUP); //door sensor

  // Initialize LCD
  lcd.init();
  lcd.backlight();

  //Serial.begin(9600);
  mySerial.begin(57600, SERIAL_8N1, 17, 16);

  //finger.begin(57600);

  if (finger.verifyPassword()) {
    Serial.println("Fingerprint Sensor Connected");
  } else {
    Serial.println("Unable to find Sensor\nCheck Connections");
  }

  String savedEmail = readEEPROM();
  Serial.print("Saved EmailL: ");
  Serial.println(savedEmail);


  //Setup Email client
  MailClient.networkReconnect(true);

  smtp.debug(1);

  

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // Print the ESP32's IP address
  Serial.print("ESP32 Web Server's IP address: ");
  Serial.println(WiFi.localIP());

  // Define a route to serve the HTML page
  server.on("/", HTTP_GET, []() {
    String response = "<!DOCTYPE html>"
    "<html>"
    "<head>"
        "<title>Smart Safe</title>"
        "<style>"
            "h1 {text-align: center;}"
            ".info  {font-size: 18px; color: #333;}"
            "body {"
                "background-color: lightblue;"
           " }"
            "input {padding: 10px; font-size: 16px; width: 250px;}"
           " button {"
                "padding: 10px 15px;"
                "font-size: 16px; border-radius: 5px; background-color: #007BFF; color: white;"
                "border: none; cursor: pointer;"
                "margin-left: 10px;"
           " }"
            "button:hover {background-color: #0056b3;}"
            "#main {"
                "flex-direction: column;"
            "}"
            ".f50 {"
               " flex: 0 0 50%;"
           " }"
            ".df {"
                "display: flex;"
           " }"
            ".row {"
                "padding: 10px;"
                "justify-content: center;"
           " }"
            "#contact {"
                "flex-direction: column;"
                "align-items: flex-start;"
            "}"
            "#formContainer {"
                "flex-direction: column;"
            "}"
        "</style>"
    "</head>"
    "<body>"
        "<div id=\"main\" class=\"df\">"
          "<div id=\"row1\" class=\"row df\">"
                "<h1>Welcome to Smart Safe</h1>"
           " </div>"
            "<div id=\"row2\" class=\"row f50 df\">"
                "<div id=\"formContainer\" class=\"f50\">"
                   " <h2>Please Enter Your Email Address:</h2>"
                   " <div id=\"inputWrapper\" class=\"df\">"
                        "<input type='email' id='email' name='user_email' placeholder='Enter your email here' />"
                        "<button onclick='displayMessage()'>Submit</button>"
                    "</div>"
                    "<span id='SubmitMessage'></span>"
                "</div>"
                "<div id=\"contact\" class=\"f50 df\">"
                    "<h2>Contact Us:</h2>"
                    "<span class=\"info\">Email: SmartSafeSD1@gmail.com</span>"
                    "<span class=\"info\">Phone Number: 345-456-5678</span>"
                    "<span class=\"info\">"
                        "Feel free to contact us anytime with questions or for more information about your safe!</span>"
               " </div>"
           " </div>"
        "</div>"
        "<script>"
           " function displayMessage() {"
            "document.getElementById('SubmitMessage').innerHTML = 'Thank you, please keep an eye on emails from our safe!';"
            "fetch(`/sendemail?email=${document.getElementById('email').value}`, {method: 'GET'} )"
            ".then(res => console.log(res))"
           " }"
        "</script>"
    "</body>"
"</html>";

      server.send(200, "text/html", response);
  });


  server.on("/sendemail", HTTP_GET, []() {
    Serial.println("SendEmail endpoint triggered");
 
    String email = server.arg(0);

    saveEmailToEEPROM(email);

    sendEmail(readEEPROM(), "Email Sign Up Complete", "Hello Safe User, \n\nThanks for registering your email with Smart Safe! Please check your email for future notifications about your safe. \n\nThank you, \nSmart Safe"); 

    server.send(200, "text/html", email);
      
  });

  // Start the server
  server.begin();

  // Reset Code
  resetCode();

}

void loop() {
  server.handleClient();
  delay(2);

  // Sensor 1
digitalWrite(trigPin1, LOW);
delayMicroseconds(2);
digitalWrite(trigPin1, HIGH);
delayMicroseconds(10);
digitalWrite(trigPin1, LOW);
duration1 = pulseIn(echoPin1, HIGH);

   // Calculate the distance
  distanceCm1 = duration1 * 0.034 / 2;
  
  // Convert to inches
  distanceInch1 = distanceCm1 * CM_TO_INCH;

  checkDoor(); //check door sensor

//First Motion Sensor
  if(distanceInch1 <2){

    Serial.print("\nMotion Detected\n");

    if (millis() >= timeOfNextMotionTrigger) {

      analogWrite(PIN_BLUE, 250);
      analogWrite(buzzerPin, 250);
      delay(500);
      analogWrite(PIN_BLUE, 0);
      analogWrite(buzzerPin, 0);

      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Motion Detected");

      delay(2000);

      sendEmail(readEEPROM(), "Alert: Motion Detected Near Your Safe", "Hello Safe User, \n\nWe wanted to alert you that movement was detected near your safe. This may indicate an attempt to access or tamper with the safe. Please verify that this activity is authorized. If you suspect unauthorized access, consider checking the area and taking necessary precautions.  \n\nThank you, \nSmart Safe");
      Serial.println("Sending Motion Detected Email...");

      resetCode();
      timeOfNextMotionTrigger = millis() + MOTION_REPORT_DELAY;
    }

    
  }

  
if (keypad.getKeys()) {
    for (int i = 0; i < LIST_MAX; i++) {
      if (keypad.key[i].stateChanged) { // Only find keys that have changed state
        switch (keypad.key[i].kstate) { // Check active key state
          case PRESSED:
          Serial.println(keypad.key[i].kchar);
            switch (keypad.key[i].kchar) {
              case '*': // Reset
                analogWrite(buzzerPin, 250);
                delay(200);
                analogWrite(buzzerPin, 0);
                delay(500);
                lcd.clear();
                lcd.setCursor(0, 0);
                lcd.print("Reset");
                lcd.setCursor(0, 1);
                lcd.print("Enter Code Again");
                delay(2000);
                resetCode();
                break;
              case '#': // Check code
                checkEnteredCode();
                break;
              default: // Enter digits
                if (numberOfCodeDigitsEntered == 0) {
                  //Clear lcd screen
                  lcd.clear();
                  lcd.setCursor(0, 0);
                  lcd.print("Enter Code");
                  lcd.setCursor(0, 1);
                }
                if (numberOfCodeDigitsEntered < 4) {
                  lcd.setCursor(numberOfCodeDigitsEntered, 1);
                  lcd.print("*");
                  enteredCode[numberOfCodeDigitsEntered] = keypad.key[i].kchar;
                  numberOfCodeDigitsEntered++;
                }
                break;
            }
            break;
        }

      }
    }
  }

  // FINGERPRINT PROCESSING
  getFingerprintID();
  
}

void energizeLock(){

  digitalWrite(RELAY_PIN, HIGH); // unlock the door
    delay(5000);
    digitalWrite(RELAY_PIN, LOW);  // lock the door
    delay(5000);
}

void checkDoor() {

  if (isDoorOpen == true) {

    //Door is currently open
    //Turn on blue LED
    digitalWrite(PIN_BLUE, 255);
    
    if (digitalRead(DOOR_SENSOR_PIN) == HIGH) {
      //Door is still open
      //Check the time to see if it's time to send the email
      if (millis() >= doorOpenTime + DOOR_OPEN_ALARM_TIMEOUT && shouldSendEmail == true) {
        //Send the email
        Serial.println("Sending door open alarm email");
        sendEmail(readEEPROM(), "Safe Door Left Open", "Hello Safe User, \n\nWe wanted to alert you that your safe door has been left open. Please close the door of your safe as soon as possible.  \n\nThank you, \nSmart Safe");
        shouldSendEmail = false;
      }
    } else {
      //Door is now closed
      Serial.println("Door is now closed");
      shouldSendEmail = true;
      delay(50);
      isDoorOpen = false;
    }
    
  } else {

    //Turn off the blue LED
    digitalWrite(PIN_BLUE, 0);

    //Door us currently closed
    if (digitalRead(DOOR_SENSOR_PIN) == HIGH) {
      Serial.println("Door is now opened");
      delay(50);
      isDoorOpen = true;
      doorOpenTime = millis();
    }
    
  }

}


uint8_t getFingerprintID() {
  uint8_t p = finger.getImage();
  if (p != FINGERPRINT_OK) return p;

  p = finger.image2Tz();
  if (p != FINGERPRINT_OK) return p;

  p = finger.fingerSearch();
  if (p == FINGERPRINT_OK) {
     Serial.println("Access granted");
    
    // Code matched - Access Granted
    analogWrite(PIN_GREEN, 255);
    analogWrite(PIN_RED, 0);
    analogWrite(buzzerPin, 250);
  
    

    delay(1000);
    analogWrite(buzzerPin, 0);

    if (inLockdownMode == true) {
      inLockdownMode = false;
      Serial.println("Lockdown Mode Deactivated");
      lcd.clear();
      //lcd.print("Normal");
      lcd.setCursor(0, 0);
      lcd.print("LOCKDOWN MODE");
      lcd.setCursor(0,1);
      lcd.print("DEACTIVATED");
      //Serial.println(millis());
      delay(3000);

    }

    lcd.clear();
    lcd.print("Access Granted");
    //Serial.println(millis());

   // delay(3000);
   energizeLock();
    
    //Send Email if Access Attempt is correct
    sendEmail(readEEPROM(), "Smart Safe Access Attempt", "Hello Safe User, \n\nWe wanted to notify you that your safe was accessed. Please review and confirm this activity to ensure it was authorized. You may check the timestamp on this email for the exact time of access. If this was an unauthorized attempt, we recommend securing the safe and taking extra precautions. \n\nThank you, \nSmart Safe");
    Serial.println("Sending safe accessed email...");

    resetCode();


  } else if (p == FINGERPRINT_NOTFOUND) {
    Serial.println("Not Valid Finger");

    analogWrite(PIN_RED, 255);
    analogWrite(PIN_GREEN, 0);

    lcd.clear();
    //lcd.setCursor(0, 0);
    lcd.print("Access Denied");

    analogWrite(buzzerPin, 250);
    delay(500);
    analogWrite(buzzerPin, 0);
    delay(500);
    analogWrite(buzzerPin, 250);
    delay(500);
    analogWrite(buzzerPin, 0);

    delay(3000);

    resetCode();
    
  }

  return p;
}


void sendEmail(String emailAddress, String subject, String body) {


  //Set LCD screen to sending email message
  if(attempts != 3){
  lcd.clear();
  lcd.print("Sending Email...");
  }

  ESP_Mail_Session session;

  session.server.host_name = SMTP_server ;

  session.server.port = SMTP_Port;

  session.login.email = sender_email;

  session.login.password = sender_password;

  session.login.user_domain = "";

  /* Declare the message class */

  SMTP_Message message;

  message.sender.name = "Smart Safe";

  message.sender.email = sender_email;

  message.subject = subject;

  message.addRecipient(Recipient_name, emailAddress);

  String textMsg = "Thank you for registering your Email with us!";

  message.text.content = body.c_str();

  message.text.charSet = "us-ascii";

  message.text.transfer_encoding = Content_Transfer_Encoding::enc_7bit;

  if (!smtp.connect(&session))

    return;

  if (!MailClient.sendMail(&smtp, &message))

    Serial.println("Error sending Email, " + smtp.errorReason());


}
